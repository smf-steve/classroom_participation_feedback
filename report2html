#! /bin/bash

# Start of report2html

cat <<EOF
<style>
.tooltip {
  position: relative;
  display: inline-block;
  border-bottom: 1px dotted black;
}

.tooltip .tooltiptext {
  visibility: hidden;
  width: 120px;
  background-color: black;
  color: #fff;
  text-align: center;
  border-radius: 6px;
  padding: 5px 0;

  /* Position the tooltip */
  position: absolute;
  z-index: 1;
}

.tooltip:hover .tooltiptext {
  visibility: visible;
}
.frame {
    overflow-y: auto;
    border: 1px solid black;
/*
    line-height: 1em;
*/
}

.frame::-webkit-scrollbar {
    -webkit-appearance: none;
}

.frame::-webkit-scrollbar:vertical {
    width: 11px;
}

.frame::-webkit-scrollbar:horizontal {
    height: 11px;
}

.frame::-webkit-scrollbar-thumb {
    border-radius: 8px;
    border: 2px solid white; /* should match background, can't be transparent */
    background-color: rgba(0, 0, 0, .5);
}
</style>
EOF

function summarize_lecture () {


cat <<EOF
<div>
  <div style="margin-left:15%"><hr width="85%"></div>
</div>
<div>
  <div>
    <div comment="title">
      <div style="width:25%;float:left"><strong>${CLASS} ${CLASS_WEEKDAY} ${CLASS_TIME}</strong></div>
      <div style="margin-left:25%">${CLASS_DATE}</div>
    </div>
  </div>
  <div style="width:25%;float:left">
    <div comment="data summary" style="">
      <div>Mean Rating: ${RATING_AVERAGE} </div>
      <div>Median Rating: ${RATING_MEDIAN}</div>
      <div>Number of Ratings: ${#RATINGS[@]}</div>
      <div>Range (low..high): <a href="#" data-toggle="tooltip" title="${RATINGS[@]}">${RATING_LOW}...${RATING_HIGH}</a></div>
      <div># Respondents: ${NUM_RESPONDENTS}</div>
      <div># Attendees: ${RECORDED_ATTENDEES}</div>
    </div>
  </div>

  <div style="margin-left:25%">
    <div comment="description">
      Today coverage: &lt;unspecified&gt;
    </div>
    <div comment="prompt">
      Prompt: Provide general feedback to today's class.
    </div>
    <div comment="feedback-window" class="frame" style="height:150px;border-style: solid;overflow:auto;overflow-y:scroll;;padding:5px;">
      <ul> 
EOF

for ((i=0; i < ${#RESPONSES[@]}; i++)) ; do
  echo "<li> ${RESPONSES[$i]} </li>"
done

cat <<EOF
      </ul>
    </div comment="feedback-window">

  </div comment="margin-left">
</div>
<br>
EOF
}

# This is approach as opposed to a simple `ls` was required because
# of the way CSUN's infrastructure works either because of security concerns
# or a misconfigured filesystem.
X=( $(echo reports/*.env) ) 
for (( i=0; i< ${#X[@]} ; i++ )) ; do
  echo ${X[$i]}
done |sort -nr |\
  while read _report ; do
    source $_report
    # Set the defualts for unspecified data

    [[ -z ${DESCRIPTION} ]]        && DESCRIPTION=="&lt;unspecified&gl;"
    [[ -z ${PROMPT} ]]             && PROMPT="Provide general feedback."
    [[ -z ${RECORDED_ATTENDEES} ]] && RECORDED_ATTENDEES="---"

    summarize_lecture
  done
