#! /bin/bash


# This file is executed either 
#   - via a cgi script, thus PARTICIPATION_HOME is defined
#   - via the cli, thus PARTICIPATION_HOME is not defined
#
# It expects the file system to be laid out as defined in participation.env
# Specifically, it needs to know the location of the "reports" directory


# Usage: report2html
#   -- prints all of the reports
#
# Usage: report2html report
#  -- prints out just that particular report


chart_id=0;
function present_chart () {
   (( chart_id++))

cat <<EOF
    <script type="text/javascript">
      google.charts.load('current', {'packages':['corechart']});
      google.charts.setOnLoadCallback(drawVisualization);

      function drawVisualization() {
        // Some raw data (not necessarily accurate)
        var data = google.visualization.arrayToDataTable([
          ['Number', 'Value', 'Median', 'Mean', 'Mode'],
EOF
echo "['', 0,  ${RATING_MEDIAN}, ${RATING_AVERAGE}, ${RATING_MODE} ],"
for ((i=0; i< ${#RATINGS[@]}; i++)) ; do
    echo "['', ${RATINGS[i]}, ${RATING_MEDIAN}, ${RATING_AVERAGE}, ${RATING_MODE} ],"
done
echo "['', 0,  ${RATING_MEDIAN}, ${RATING_AVERAGE}, ${RATING_MODE} ]"

cat <<EOF
        ]);

      var options = {
          hAxis: {title: 'Count: ${#RATINGS[@]}, Median: ${RATING_MEDIAN}, Mean: ${RATING_AVERAGE}, Mode: ${RATING_MODE}' },
          vAxis: {minValue: 0, maxValue: 10},
          seriesType: 'bars',
          legend: { position: 'none'},
          series: { 1:{type: 'line'},
                    2:{type: 'line'},
                    3:{type: 'line'}}
        };


        var chart_${chart_id} = new google.visualization.ComboChart(document.getElementById('chart_${chart_id}'));
        chart_${chart_id}.draw(data, options);
      }
    </script>
    <div id="chart_${chart_id}" style="width: 300px; height: 300px;"></div>
EOF

}


response_id=0;
function present_response () {
  (( response_id ++ ))

if [[ -z ${NUM_RESPONDENTS} ]] ; then 
            NUM_RESPONDENTS="0"
fi
cat <<EOF
  <div class="container">
    <div class="row">
      <div class="col">
      Today's Feedback
      </div>
      <div class="col" style="text-align: right">
        Respondents: ${NUM_RESPONDENTS} / ${RECORDED_ATTENDEES}
      </div>
    </div>
  </div>
  <div class="container frame">
    Prompt: ${PROMPT}
    <ol id="txt_box_${response_id}"> 
EOF

for ((i=0; i < ${#RESPONSES[@]}; i++)) ; do
   echo "<li> ${RESPONSES[$i]} </li>"
done

cat <<EOF
      <br comment="to give a visual at the end of the ol">
    </ol>
  </div comment="feedback-window">

EOF
}



function summarize_lecture () {
  _report="$1"

  source $_report

cat <<EOF
    <br>
    <div class="row"><hr></div>
    <div class="row">
      ${CLASS} ${CLASS_WEEKDAY} ${CLASS_TIME}, ${CLASS_DATE}
    </div>
    <div class="row">
      Class Coverage: ${DESCRIPTION}
    </div>
    <br>

EOF
  echo '<div class="row">'
    echo '<div class="col-9">'
      present_response
    echo '</div>'
    echo '<div class="col-1">'
      present_chart
    echo '</div>'
  echo '</div>'

}


# This is approach as opposed to a simple `ls` was required because
# of the way CSUN's infrastructure works either because of security concerns
# or a configured filesystem.

function report2html() {

  # process all of the reports
  echo '<div class="container">'

  shopt -s nullglob  
  X=( ${REPORTS}/*.env ) 
  for (( i=0; i< ${#X[@]} ; i++ )) ; do
    echo ${X[$i]}
  done | sort -nr | while read _report ; do

    summarize_lecture $_report
  done
  echo '</div>'
}
