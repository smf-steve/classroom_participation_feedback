#! /bin/bash

# This file is executed either 
#   - via a cgi script, thus PARTICIPATION_HOME is defined
#   - via the cli, thus PARTICIPATION_HOME is not defined
#
# It expects the file system to be laid out as defined in participation.env
# Specifically, it needs to know the location of the "reports" directory

LOG_FILE="$1"
if [[ ! -f ${LOG_FILE} ]] ; then
  echo "usage: $0 <file>.log"
  echo "  output is placed into <file>.env"
  exit 1
fi

if [[ -z "${PARTICIPATION_HOME}" ]] ; then
  PARTICIPATION_HOME=$(realpath $(dirname ${LOG_FILE})/.. )
  source ${PARTICIPATION_HOME}/etc/participation.env 
fi
FILE_NAME_BASE=$(basename ${LOG_FILE} .log )     ## Note RedHat does not support `basename -s .log ${}LOG_FILE}`
REPORT_FILE=${REPORTS}/${FILE_NAME_BASE}.env 

if [[ -f ${REPORT_FILE} ]] ; then
  # If there is a report file, source it
  source ${REPORT_FILE}
else
  # Otherwise set up the default values
  #   FILE_NAME_BASE SYNTAX:  $FULL_DATE:$CLASS-$CLASS_WEEKDAY-$CLASS_24TIME
  FILE_NAME="${FULL_DATE}:${CLASS}-${CLASS_WEEKDAY}-${CLASS_24TIME}.env"

  CLASS_DATE=$(awk -F: '{ print $1}'   <<< ${FILE_NAME_BASE})

  _session=$(awk -F: '{ print $2}'    <<< ${FILE_NAME_BASE})
     CLASS=$(awk -F- '{ print $1}'           <<< ${_session})
     CLASS_WEEKDAY=$(awk -F- '{ print $2}'   <<< ${_session})
     CLASS_24TIME=$(awk -F- '{ print $3}'    <<< ${_session})

    _hour="$(sed 's/\(.*\)\(..\)$/\1/'       <<< ${CLASS_24TIME})"
    _min="$(sed  's/\(.*\)\(..\)$/\2/'       <<< ${CLASS_24TIME})"
    if (( _hour > 12 )) ; then
      (( _hour = _hour - 12 ))
    fi
  CLASS_TIME="${_hour}:${_min}"

  DESCRIPTION="${DEFAULT_DESCRIPTION}"
  PROMPT="${DEFAULT_PROMPT}"
  RECORDED_ATTENDEES="${DEFAULT_RECORDED_ATTENDEES}"
fi

# Now reset the dynamic information 
RATING_AVERAGE=
RATING_MEDIAN=
RATING_MODE=
RATING_LOW=
RATING_HIGH=
RATINGS=()
NUM_RESPONDENTS=
RESPONSES=()

TMP_FILE=/tmp/.$$.temp
cat ${LOG_FILE}                            |
  sed '/^ *#/d'                            |
  sed -e 's/^.*rating=//' -e 's/,.*$//'    |
  sed '/^-/d'                              |
  sort -n                         > ${TMP_FILE}
  while read _value ; do 
     RATINGS+=( "$_value" )
  done < ${TMP_FILE}

_num_ratings=${#RATINGS[@]}
if (( _num_ratings > 0 )) ; then 
  _mid=$(( _num_ratings / 2 ))
  RATING_LOW=${RATINGS[0]}
  RATING_HIGH=${RATINGS[ $(( _num_ratings -1 )) ]}

  if (( _num_ratings % 2 != 0  )) ; then 
     RATING_MEDIAN=${RATINGS[${_mid}]}
  else
     RATING_MEDIAN=$(awk "{ print (${RATINGS[$((_mid -1))]} + ${RATINGS[${_mid}]}) / 2 }"  <<< "null" )
  fi

  _sum=0
  for (( i=0; i < _num_ratings; i++ )) ; do
    _sum=$(awk "{ print $_sum + ${RATINGS[$i]} }" <<< "null"  )
  done
  RATING_AVERAGE=$(awk "{ printf \"%.1f\", $_sum / $_num_ratings }" <<< "null" )
  
  RATING_MODE="0"
  mod_count=0
  num=${RATINGS[0]}
  count=0
  for ((i=0 ; i < ${#RATINGS[@]}; i++ )) ; do
      if [[ $num != ${RATINGS[i]} ]] ; then
        num=${RATINGS[i]} 
        count=0
      fi 
      ((count++))
      if (( count > mod_count )) ; then
        RATING_MODE=$num
        mod_count=$count
      fi
  done
fi


NUM_RESPONDENTS=$(sed -n '$=' ${LOG_FILE})
 
#############  Process the reponse fields
cat ${LOG_FILE}                                   | 
  sed '/^ *#/d'                                   |
  sed -e 's/^.*response=//' -e 's/,.*$//'         |
  sed -f ${ETC}/response_filter.sed > ${TMP_FILE}

  while read _response ; do 
    EMOJI=$(sed -n '/<img/s|^.*images/\(.*\.gif\).*$|\1|p' <<< ${_response} )
    if [ -n "${EMOJI}" ] ; then
      if [ ! -e ${IMAGES}/${EMOJI} ] ; then 
        ln -s  ${IMAGES}/_none.gif ${IMAGES}/${EMOJI}
       fi
     fi 
    
    RESPONSES+=( "${_response}" )
  done < ${TMP_FILE}

rm -f ${TMP_FILE}
#############

# Output the information into the log file
cat > ${REPORT_FILE} <<EOF
# Prepared Date: $(date)

FILE_NAME="${FILE_NAME}"
CLASS="${CLASS}"
CLASS_WEEKDAY="${CLASS_WEEKDAY}"
CLASS_TIME="${CLASS_TIME}"
CLASS_24TIME="${CLASS_24TIME}"
CLASS_DATE="${CLASS_DATE}"
DESCRIPTION="${DESCRIPTION}"
PROMPT="${PROMPT}"
RECORDED_ATTENDEES="${RECORDED_ATTENDEES}"

# Above is potentially generated from init_report.cgi
# Below is generated via the processing of the corresponding log file

RATING_AVERAGE=${RATING_AVERAGE}
RATING_MEDIAN=${RATING_MEDIAN}
RATING_MODE=${RATING_MODE}
RATING_LOW=${RATING_LOW}
RATING_HIGH=${RATING_HIGH}

# NUM_RESPONDENTS is the number of students that hit the submit button
NUM_RESPONDENTS=${NUM_RESPONDENTS}

EOF
{
  echo -n "RATINGS=("
  for ((i=0; i< ${#RATINGS[@]}; i++)) ; do
    echo -n " ${RATINGS[$i]}"
  done
  echo " )"
  echo 
  echo "RESPONSES=("
  for ((i=0; i< ${#RESPONSES[@]}; i++)) ; do
    echo "    \"${RESPONSES[$i]}\""
  done
  echo ")"
} >> ${REPORT_FILE}

